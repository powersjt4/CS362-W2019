        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:10
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    22343:    8:int compare(const void* a, const void* b) {
    22343:    9:  if (*(int*)a > *(int*)b)
      250:   10:    return 1;
    22093:   11:  if (*(int*)a < *(int*)b)
     8377:   12:    return -1;
    13716:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
      504:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      504:   44:  SelectStream(1);
      504:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
      504:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      504:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     5544:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    55440:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    50400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      504:   73:  if (numPlayers == 2)
        -:   74:    {
      169:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      335:   77:  else if (numPlayers == 3)
        -:   78:    {
      154:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
      181:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      504:   87:  if (numPlayers == 2)
        -:   88:    {
      169:   89:      state->supplyCount[estate] = 8;
      169:   90:      state->supplyCount[duchy] = 8;
      169:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      335:   95:      state->supplyCount[estate] = 12;
      335:   96:      state->supplyCount[duchy] = 12;
      335:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      504:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      504:  102:  state->supplyCount[silver] = 40;
      504:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    10584:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    92736:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    86688:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     4032:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     4032:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     4032:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    82656:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     2028:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     1524:  140:      state->deckCount[i] = 0;
     6096:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     4572:  143:	  state->deck[i][j] = estate;
     4572:  144:	  state->deckCount[i]++;
        -:  145:	}
    12192:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    10668:  148:	  state->deck[i][j] = copper;
    10668:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     2028:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     1524:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     2028:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     1524:  166:      state->handCount[i] = 0;
     1524:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    14112:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    13608:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      504:  182:  state->outpostPlayed = 0;
      504:  183:  state->phase = 0;
      504:  184:  state->numActions = 1;
      504:  185:  state->numBuys = 1;
      504:  186:  state->playedCardCount = 0;
      504:  187:  state->whoseTurn = 0;
      504:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     3024:  192:  for (it = 0; it < 5; it++){
     2520:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
      504:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      504:  198:  return 0;
        -:  199:}
        -:  200:
     1526:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     1526:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     1526:  209:  if (state->deckCount[player] < 1)
        1:  210:    return -1;
     1525:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    18790:  214:  while (state->deckCount[player] > 0) {
    15740:  215:    card = floor(Random() * state->deckCount[player]);
    15740:  216:    newDeck[newDeckPos] = state->deck[player][card];
    15740:  217:    newDeckPos++;
   113262:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    97522:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    15740:  221:    state->deckCount[player]--;
        -:  222:  }
    17265:  223:  for (i = 0; i < newDeckPos; i++) {
    15740:  224:    state->deck[player][i] = newDeck[i];
    15740:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     1525:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
        4:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        4:  280:  who = state->whoseTurn;
        -:  281:
        4:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
        3:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        2:  289:    return -1;
        1:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
        1:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        1:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
        1:  299:    state->coins = (state->coins) - (getCost(supplyPos));
        1:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        1:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        4:  320:int supplyCount(int card, struct gameState *state) {
        4:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
      504:  346:int whoseTurn(struct gameState *state) {
      504:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        3:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        3:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        2:  401:  j = 0;
       52:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
       50:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
        3:  406:	  j++;
        -:  407:	}
        -:  408:    }
        2:  409:  if ( j >= 3)
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        1:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
    19424:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    19424:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    19424:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    19424:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    19424:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    19424:  576:    state->deckCount[player]--;
    19424:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    19424:  580:  return 0;
        -:  581:}
        -:  582:
       30:  583:int getCost(int cardNumber)
        -:  584:{
       30:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        3:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo: 
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:	
        1:  643:  return -1;
        -:  644:}
        -:  645:
      102:  646:int adventurerEffect(int currentPlayer, struct gameState *state, int temphand[MAX_HAND]){
      102:  647:	int drawnTreasure = 0;
        -:  648:	int cardDrawn;
      102:  649:	int z = 0;
        -:  650:	
        -:  651:	//Reveal cards until two treasure cards are drawn
        -:  652:	//non-treasure cards are put into a temp hand that will be discarded
    16801:  653:	while(drawnTreasure < 2){
    16597:  654:		if(state->deckCount[currentPlayer] < 1){
    #####:  655:			shuffle(currentPlayer, state);
        -:  656:		}
    16597:  657:		drawCard(currentPlayer, state);
    16597:  658:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
    16597:  659:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
      204:  660:			drawnTreasure++;
        -:  661:		else{
    16393:  662:			temphand[z]=cardDrawn;
    16393:  663:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    16393:  664:			z++;
        -:  665:		}	
        -:  666:	}
        -:  667:	
        -:  668:	/*  <------- Introduced bug - forgot to discard the revealed cards
        -:  669:	//add the revealed non-treasure cards to the discard pile
        -:  670:	while(z-1>=0){
        -:  671:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  672:		z=z-1;
        -:  673:    }
        -:  674:	*/
        -:  675:    
        -:  676:	
      102:  677:	return 0;
        -:  678:}
        -:  679:
    #####:  680:int smithyEffect(int currentPlayer, struct gameState *state, int handPos){
        -:  681:    //+3 Cards
    #####:  682:    int i=0;
        -:  683:	
        -:  684:	// <------- Introduced bug - loops too many times
    #####:  685:	for (i = 0; i < 6; i++)
        -:  686:	{
    #####:  687:	  drawCard(currentPlayer, state);
        -:  688:	}
        -:  689:			
        -:  690:    //discard card from hand
    #####:  691:    discardCard(handPos, currentPlayer, state, 0);
        -:  692:	    
    #####:  693:	return 0;  
        -:  694:}
        -:  695:
    #####:  696:int mineEffect(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos){
        -:  697:    int j;
        -:  698:	int i;
        -:  699:	
    #####:  700:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  701:
        -:  702:	//check if card to be trashed is treasure
    #####:  703:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  704:	{
    #####:  705:	  return -1;
        -:  706:	}
        -:  707:	
        -:  708:
        -:  709:	//check if card to be gained is out of range
    #####:  710:    if (choice2 > treasure_map || choice2 < curse)
        -:  711:	{
    #####:  712:	  return -1;
        -:  713:	}
        -:  714:
        -:  715:	//  <------- Introduced bug - inequality operator reversed
        -:  716:    //validate card is gainable with the + 3
    #####:  717:	if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  718:	{
    #####:  719:	  return -1;
        -:  720:	}
        -:  721:
    #####:  722:    gainCard(choice2, state, 2, currentPlayer);
        -:  723:
        -:  724:    //discard card from hand
    #####:  725:    discardCard(handPos, currentPlayer, state, 0);
        -:  726:
        -:  727:    //discard trashed card
    #####:  728:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  729:	{
    #####:  730:	  if (state->hand[currentPlayer][i] == j)
        -:  731:	    {
    #####:  732:	      discardCard(i, currentPlayer, state, 1);			
    #####:  733:	      break;
        -:  734:	    }
        -:  735:	}
        -:  736:			
    #####:  737:    return 0;  
        -:  738:}	
        -:  739:
        1:  740:int councilroomEffect(int currentPlayer, struct gameState *state, int handPos){
        -:  741:	int i;
        -:  742:
        -:  743:    //+4 Cards
        5:  744:    for (i = 0; i < 4; i++)
        -:  745:	{
        4:  746:	  drawCard(currentPlayer, state);
        -:  747:	}
        -:  748:			
        -:  749:    //+1 Buy
        1:  750:    state->numBuys++;
        -:  751:			
        -:  752:    //Each other player draws a card
        3:  753:    for (i = 0; i < state->numPlayers; i++)
        -:  754:	{
        -:  755:	  /*   <------- Introduced bug - does not check if i is current player to not draw another card
        -:  756:	  if ( i != currentPlayer )
        -:  757:	    {
        -:  758:	      drawCard(i, state);
        -:  759:	    }
        -:  760:		*/
        -:  761:		// <-------------kill line below for fully functioning code
        2:  762:		drawCard(i, state);
        -:  763:		// <-------------kill line above for fully functioning code
        -:  764:	}
        -:  765:			
        -:  766:    //put played card in played card pile
        1:  767:    discardCard(handPos, currentPlayer, state, 0);
        -:  768:			
        1:  769:    return 0;   
        -:  770:}
        -:  771:
      300:  772:int stewardEffect(int currentPlayer, struct gameState *state, int choice1, int choice2, int choice3, int handPos){
      300:  773:    if (choice1 == 1)
        -:  774:	{
        -:  775:	  //+2 cards
      100:  776:	  drawCard(currentPlayer, state);
      100:  777:	  drawCard(currentPlayer, state);
        -:  778:	}
      200:  779:    else if (choice1 == 2)
        -:  780:	{
        -:  781:	  //+2 coins
      100:  782:	  state->coins = state->coins + 2;
        -:  783:	}
        -:  784:    else
        -:  785:	{
        -:  786:	  //trash 2 cards in hand
      100:  787:	  discardCard(choice2, currentPlayer, state, 1);
      100:  788:	  discardCard(choice3, currentPlayer, state, 1);
        -:  789:	}
        -:  790:			
        -:  791:    //discard card from hand
      300:  792:    discardCard(handPos, currentPlayer, state, 0);
      300:  793:    return 0;
        -:  794:	  
        -:  795:}
        -:  796:
      504:  797:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  798:{
        -:  799:  int i;
        -:  800:  int j;
        -:  801:  int k;
        -:  802:  int x;
        -:  803:  int index;
      504:  804:  int currentPlayer = whoseTurn(state);
      504:  805:  int nextPlayer = currentPlayer + 1;
        -:  806:
      504:  807:  int tributeRevealedCards[2] = {-1, -1};
        -:  808:  int temphand[MAX_HAND];// moved above the if statement
        -:  809:  //int drawntreasure=0;
        -:  810:  //int cardDrawn;
        -:  811:  //int z = 0;// this is the counter for the temp hand
      504:  812:  if (nextPlayer > (state->numPlayers - 1)){
      179:  813:    nextPlayer = 0;
        -:  814:  }
        -:  815:  
        -:  816:	
        -:  817:  //uses switch to select card and perform actions
      504:  818:  switch( card ) 
        -:  819:    {
        -:  820:    case adventurer:
      102:  821:		return adventurerEffect(currentPlayer, state, temphand);
        -:  822:
        -:  823:	
        -:  824:    case council_room:
        1:  825:		return councilroomEffect(currentPlayer, state, handPos);
        -:  826:
        -:  827:			
        -:  828:    case feast:
        -:  829:      //gain card with cost up to 5
        -:  830:      //Backup hand
    #####:  831:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  832:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  833:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  834:      }
        -:  835:      //Backup hand
        -:  836:
        -:  837:      //Update Coins for Buy
    #####:  838:      updateCoins(currentPlayer, state, 5);
    #####:  839:      x = 1;//Condition to loop on
    #####:  840:      while( x == 1) {//Buy one card
    #####:  841:	if (supplyCount(choice1, state) <= 0){
        -:  842:	  if (DEBUG)
        -:  843:	    printf("None of that card left, sorry!\n");
        -:  844:
        -:  845:	  if (DEBUG){
        -:  846:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  847:	  }
        -:  848:	}
    #####:  849:	else if (state->coins < getCost(choice1)){
    #####:  850:	  printf("That card is too expensive!\n");
        -:  851:
        -:  852:	  if (DEBUG){
        -:  853:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  854:	  }
        -:  855:	}
        -:  856:	else{
        -:  857:
        -:  858:	  if (DEBUG){
        -:  859:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  860:	  }
        -:  861:
    #####:  862:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  863:	  x = 0;//No more buying cards
        -:  864:
        -:  865:	  if (DEBUG){
        -:  866:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  867:	  }
        -:  868:
        -:  869:	}
        -:  870:      }     
        -:  871:
        -:  872:      //Reset Hand
    #####:  873:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  874:	state->hand[currentPlayer][i] = temphand[i];
    #####:  875:	temphand[i] = -1;
        -:  876:      }
        -:  877:      //Reset Hand
        -:  878:      			
    #####:  879:      return 0;
        -:  880:			
        -:  881:    case gardens:
    #####:  882:      return -1;
        -:  883:			
        -:  884:    case mine:
    #####:  885:		return mineEffect(currentPlayer, state, choice1, choice2, handPos);
        -:  886:
        -:  887:			
        -:  888:    case remodel:
    #####:  889:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  890:
    #####:  891:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  892:	{
    #####:  893:	  return -1;
        -:  894:	}
        -:  895:
    #####:  896:      gainCard(choice2, state, 0, currentPlayer);
        -:  897:
        -:  898:      //discard card from hand
    #####:  899:      discardCard(handPos, currentPlayer, state, 0);
        -:  900:
        -:  901:      //discard trashed card
    #####:  902:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  903:	{
    #####:  904:	  if (state->hand[currentPlayer][i] == j)
        -:  905:	    {
    #####:  906:	      discardCard(i, currentPlayer, state, 0);			
    #####:  907:	      break;
        -:  908:	    }
        -:  909:	}
        -:  910:
        -:  911:
    #####:  912:      return 0;
        -:  913:		
        -:  914:    case smithy:
    #####:  915:		return smithyEffect(currentPlayer, state, handPos);
        -:  916:
        -:  917:		
        -:  918:    case village:
        -:  919:      //+1 Card
    #####:  920:      drawCard(currentPlayer, state);
        -:  921:			
        -:  922:      //+2 Actions
    #####:  923:      state->numActions = state->numActions + 2;
        -:  924:			
        -:  925:      //discard played card from hand
    #####:  926:      discardCard(handPos, currentPlayer, state, 0);
    #####:  927:      return 0;
        -:  928:		
        -:  929:    case baron:
    #####:  930:      state->numBuys++;//Increase buys by 1!
    #####:  931:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  932:	int p = 0;//Iterator for hand!
    #####:  933:	int card_not_discarded = 1;//Flag for discard set!
    #####:  934:	while(card_not_discarded){
    #####:  935:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  936:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  937:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  938:	    state->discardCount[currentPlayer]++;
    #####:  939:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  940:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  941:	    }
    #####:  942:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  943:	    state->handCount[currentPlayer]--;
    #####:  944:	    card_not_discarded = 0;//Exit the loop
        -:  945:	  }
    #####:  946:	  else if (p > state->handCount[currentPlayer]){
        -:  947:	    if(DEBUG) {
        -:  948:	      printf("No estate cards in your hand, invalid choice\n");
        -:  949:	      printf("Must gain an estate if there are any\n");
        -:  950:	    }
    #####:  951:	    if (supplyCount(estate, state) > 0){
    #####:  952:	      gainCard(estate, state, 0, currentPlayer);
    #####:  953:	      state->supplyCount[estate]--;//Decrement estates
    #####:  954:	      if (supplyCount(estate, state) == 0){
    #####:  955:		isGameOver(state);
        -:  956:	      }
        -:  957:	    }
    #####:  958:	    card_not_discarded = 0;//Exit the loop
        -:  959:	  }
        -:  960:			    
        -:  961:	  else{
    #####:  962:	    p++;//Next card
        -:  963:	  }
        -:  964:	}
        -:  965:      }
        -:  966:			    
        -:  967:      else{
    #####:  968:	if (supplyCount(estate, state) > 0){
    #####:  969:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  970:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  971:	  if (supplyCount(estate, state) == 0){
    #####:  972:	    isGameOver(state);
        -:  973:	  }
        -:  974:	}
        -:  975:      }
        -:  976:	    
        -:  977:      
    #####:  978:      return 0;
        -:  979:		
        -:  980:    case great_hall:
        -:  981:      //+1 Card
      101:  982:      drawCard(currentPlayer, state);
        -:  983:			
        -:  984:      //+1 Actions
      101:  985:      state->numActions++;
        -:  986:			
        -:  987:      //discard card from hand
      101:  988:      discardCard(handPos, currentPlayer, state, 0);
      101:  989:      return 0;
        -:  990:		
        -:  991:    case minion:
        -:  992:      //+1 action
    #####:  993:      state->numActions++;
        -:  994:			
        -:  995:      //discard card from hand
    #####:  996:      discardCard(handPos, currentPlayer, state, 0);
        -:  997:			
    #####:  998:      if (choice1)		//+2 coins
        -:  999:	{
    #####: 1000:	  state->coins = state->coins + 2;
        -: 1001:	}
        -: 1002:			
    #####: 1003:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1004:	{
        -: 1005:	  //discard hand
    #####: 1006:	  while(numHandCards(state) > 0)
        -: 1007:	    {
    #####: 1008:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1009:	    }
        -: 1010:				
        -: 1011:	  //draw 4
    #####: 1012:	  for (i = 0; i < 4; i++)
        -: 1013:	    {
    #####: 1014:	      drawCard(currentPlayer, state);
        -: 1015:	    }
        -: 1016:				
        -: 1017:	  //other players discard hand and redraw if hand size > 4
    #####: 1018:	  for (i = 0; i < state->numPlayers; i++)
        -: 1019:	    {
    #####: 1020:	      if (i != currentPlayer)
        -: 1021:		{
    #####: 1022:		  if ( state->handCount[i] > 4 )
        -: 1023:		    {
        -: 1024:		      //discard hand
    #####: 1025:		      while( state->handCount[i] > 0 )
        -: 1026:			{
    #####: 1027:			  discardCard(handPos, i, state, 0);
        -: 1028:			}
        -: 1029:							
        -: 1030:		      //draw 4
    #####: 1031:		      for (j = 0; j < 4; j++)
        -: 1032:			{
    #####: 1033:			  drawCard(i, state);
        -: 1034:			}
        -: 1035:		    }
        -: 1036:		}
        -: 1037:	    }
        -: 1038:				
        -: 1039:	}
    #####: 1040:      return 0;
        -: 1041:		
        -: 1042:    case steward:
      300: 1043:		return stewardEffect(currentPlayer, state, choice1, choice2, choice3, handPos);
        -: 1044:
        -: 1045:		
        -: 1046:    case tribute:
    #####: 1047:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1048:	if (state->deckCount[nextPlayer] > 0){
    #####: 1049:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1050:	  state->deckCount[nextPlayer]--;
        -: 1051:	}
    #####: 1052:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1053:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1054:	  state->discardCount[nextPlayer]--;
        -: 1055:	}
        -: 1056:	else{
        -: 1057:	  //No Card to Reveal
        -: 1058:	  if (DEBUG){
        -: 1059:	    printf("No cards to reveal\n");
        -: 1060:	  }
        -: 1061:	}
        -: 1062:      }
        -: 1063:	    
        -: 1064:      else{
    #####: 1065:	if (state->deckCount[nextPlayer] == 0){
    #####: 1066:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1067:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1068:	    state->deckCount[nextPlayer]++;
    #####: 1069:	    state->discard[nextPlayer][i] = -1;
    #####: 1070:	    state->discardCount[nextPlayer]--;
        -: 1071:	  }
        -: 1072:			    
    #####: 1073:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1074:	} 
    #####: 1075:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1076:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1077:	state->deckCount[nextPlayer]--;
    #####: 1078:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1079:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1080:	state->deckCount[nextPlayer]--;
        -: 1081:      }    
        -: 1082:		       
    #####: 1083:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1084:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1085:	state->playedCardCount++;
    #####: 1086:	tributeRevealedCards[1] = -1;
        -: 1087:      }
        -: 1088:
    #####: 1089:      for (i = 0; i <= 2; i ++){
    #####: 1090:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1091:	  state->coins += 2;
        -: 1092:	}
        -: 1093:		    
    #####: 1094:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1095:	  drawCard(currentPlayer, state);
    #####: 1096:	  drawCard(currentPlayer, state);
        -: 1097:	}
        -: 1098:	else{//Action Card
    #####: 1099:	  state->numActions = state->numActions + 2;
        -: 1100:	}
        -: 1101:      }
        -: 1102:	    
    #####: 1103:      return 0;
        -: 1104:		
        -: 1105:    case ambassador:
    #####: 1106:      j = 0;		//used to check if player has enough cards to discard
        -: 1107:
    #####: 1108:      if (choice2 > 2 || choice2 < 0)
        -: 1109:	{
    #####: 1110:	  return -1;				
        -: 1111:	}
        -: 1112:
    #####: 1113:      if (choice1 == handPos)
        -: 1114:	{
    #####: 1115:	  return -1;
        -: 1116:	}
        -: 1117:
    #####: 1118:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1119:	{
    #####: 1120:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1121:	    {
    #####: 1122:	      j++;
        -: 1123:	    }
        -: 1124:	}
    #####: 1125:      if (j < choice2)
        -: 1126:	{
    #####: 1127:	  return -1;				
        -: 1128:	}
        -: 1129:
        -: 1130:      if (DEBUG) 
        -: 1131:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1132:
        -: 1133:      //increase supply count for choosen card by amount being discarded
    #####: 1134:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1135:			
        -: 1136:      //each other player gains a copy of revealed card
    #####: 1137:      for (i = 0; i < state->numPlayers; i++)
        -: 1138:	{
    #####: 1139:	  if (i != currentPlayer)
        -: 1140:	    {
    #####: 1141:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1142:	    }
        -: 1143:	}
        -: 1144:
        -: 1145:      //discard played card from hand
    #####: 1146:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1147:
        -: 1148:      //trash copies of cards returned to supply
    #####: 1149:      for (j = 0; j < choice2; j++)
        -: 1150:	{
    #####: 1151:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1152:	    {
    #####: 1153:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1154:		{
    #####: 1155:		  discardCard(i, currentPlayer, state, 1);
    #####: 1156:		  break;
        -: 1157:		}
        -: 1158:	    }
        -: 1159:	}			
        -: 1160:
    #####: 1161:      return 0;
        -: 1162:		
        -: 1163:    case cutpurse:
        -: 1164:
    #####: 1165:      updateCoins(currentPlayer, state, 2);
    #####: 1166:      for (i = 0; i < state->numPlayers; i++)
        -: 1167:	{
    #####: 1168:	  if (i != currentPlayer)
        -: 1169:	    {
    #####: 1170:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1171:		{
    #####: 1172:		  if (state->hand[i][j] == copper)
        -: 1173:		    {
    #####: 1174:		      discardCard(j, i, state, 0);
    #####: 1175:		      break;
        -: 1176:		    }
    #####: 1177:		  if (j == state->handCount[i])
        -: 1178:		    {
    #####: 1179:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1180:			{
        -: 1181:			  if (DEBUG)
        -: 1182:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1183:			}	
    #####: 1184:		      break;
        -: 1185:		    }		
        -: 1186:		}
        -: 1187:					
        -: 1188:	    }
        -: 1189:				
        -: 1190:	}				
        -: 1191:
        -: 1192:      //discard played card from hand
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1194:
    #####: 1195:      return 0;
        -: 1196:
        -: 1197:		
        -: 1198:    case embargo: 
        -: 1199:      //+2 Coins
    #####: 1200:      state->coins = state->coins + 2;
        -: 1201:			
        -: 1202:      //see if selected pile is in play
    #####: 1203:      if ( state->supplyCount[choice1] == -1 )
        -: 1204:	{
    #####: 1205:	  return -1;
        -: 1206:	}
        -: 1207:			
        -: 1208:      //add embargo token to selected supply pile
    #####: 1209:      state->embargoTokens[choice1]++;
        -: 1210:			
        -: 1211:      //trash card
    #####: 1212:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1213:      return 0;
        -: 1214:		
        -: 1215:    case outpost:
        -: 1216:      //set outpost flag
    #####: 1217:      state->outpostPlayed++;
        -: 1218:			
        -: 1219:      //discard card
    #####: 1220:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1221:      return 0;
        -: 1222:		
        -: 1223:    case salvager:
        -: 1224:      //+1 buy
    #####: 1225:      state->numBuys++;
        -: 1226:			
    #####: 1227:      if (choice1)
        -: 1228:	{
        -: 1229:	  //gain coins equal to trashed card
    #####: 1230:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1231:	  //trash card
    #####: 1232:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1233:	}
        -: 1234:			
        -: 1235:      //discard card
    #####: 1236:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1237:      return 0;
        -: 1238:		
        -: 1239:    case sea_hag:
    #####: 1240:      for (i = 0; i < state->numPlayers; i++){
    #####: 1241:	if (i != currentPlayer){
    #####: 1242:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1243:	  state->discardCount[i]++;
    #####: 1244:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1245:	}
        -: 1246:      }
    #####: 1247:      return 0;
        -: 1248:		
        -: 1249:    case treasure_map:
        -: 1250:      //search hand for another treasure_map
    #####: 1251:      index = -1;
    #####: 1252:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1253:	{
    #####: 1254:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1255:	    {
    #####: 1256:	      index = i;
    #####: 1257:	      break;
        -: 1258:	    }
        -: 1259:	}
    #####: 1260:      if (index > -1)
        -: 1261:	{
        -: 1262:	  //trash both treasure cards
    #####: 1263:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1264:	  discardCard(index, currentPlayer, state, 1);
        -: 1265:
        -: 1266:	  //gain 4 Gold cards
    #####: 1267:	  for (i = 0; i < 4; i++)
        -: 1268:	    {
    #####: 1269:	      gainCard(gold, state, 1, currentPlayer);
        -: 1270:	    }
        -: 1271:				
        -: 1272:	  //return success
    #####: 1273:	  return 1;
        -: 1274:	}
        -: 1275:			
        -: 1276:      //no second treasure_map found in hand
    #####: 1277:      return -1;
        -: 1278:    }
        -: 1279:	
    #####: 1280:  return -1;
        -: 1281:}
        -: 1282:
      602: 1283:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1284:{
        -: 1285:	
        -: 1286:  //if card is not trashed, added to Played pile 
      602: 1287:  if (trashFlag < 1)
        -: 1288:    {
        -: 1289:      //add card to played pile
      402: 1290:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      402: 1291:      state->playedCardCount++;
        -: 1292:    }
        -: 1293:	
        -: 1294:  //set played card to -1
      602: 1295:  state->hand[currentPlayer][handPos] = -1;
        -: 1296:	
        -: 1297:  //remove card from player's hand
      602: 1298:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1299:    {
        -: 1300:      //reduce number of cards in hand
    #####: 1301:      state->handCount[currentPlayer]--;
        -: 1302:    }
      602: 1303:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1304:    {
        -: 1305:      //reduce number of cards in hand
    #####: 1306:      state->handCount[currentPlayer]--;
        -: 1307:    }
        -: 1308:  else 	
        -: 1309:    {
        -: 1310:      //replace discarded card with last card in hand
      602: 1311:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1312:      //set last card to -1
      602: 1313:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1314:      //reduce number of cards in hand
      602: 1315:      state->handCount[currentPlayer]--;
        -: 1316:    }
        -: 1317:	
      602: 1318:  return 0;
        -: 1319:}
        -: 1320:
        1: 1321:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1322:{
        -: 1323:  //Note: supplyPos is enum of choosen card
        -: 1324:	
        -: 1325:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1326:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1327:    {
    #####: 1328:      return -1;
        -: 1329:    }
        -: 1330:	
        -: 1331:  //added card for [whoseTurn] current player:
        -: 1332:  // toFlag = 0 : add to discard
        -: 1333:  // toFlag = 1 : add to deck
        -: 1334:  // toFlag = 2 : add to hand
        -: 1335:
        1: 1336:  if (toFlag == 1)
        -: 1337:    {
    #####: 1338:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1339:      state->deckCount[player]++;
        -: 1340:    }
        1: 1341:  else if (toFlag == 2)
        -: 1342:    {
    #####: 1343:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1344:      state->handCount[player]++;
        -: 1345:    }
        -: 1346:  else
        -: 1347:    {
        1: 1348:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1349:      state->discardCount[player]++;
        -: 1350:    }
        -: 1351:	
        -: 1352:  //decrease number in supply pile
        1: 1353:  state->supplyCount[supplyPos]--;
        -: 1354:	 
        1: 1355:  return 0;
        -: 1356:}
        -: 1357:
      504: 1358:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1359:{
        -: 1360:  int i;
        -: 1361:	
        -: 1362:  //reset coin count
      504: 1363:  state->coins = 0;
        -: 1364:
        -: 1365:  //add coins for each Treasure card in player's hand
     3024: 1366:  for (i = 0; i < state->handCount[player]; i++)
        -: 1367:    {
     2520: 1368:      if (state->hand[player][i] == copper)
        -: 1369:	{
     1977: 1370:	  state->coins += 1;
        -: 1371:	}
      543: 1372:      else if (state->hand[player][i] == silver)
        -: 1373:	{
    #####: 1374:	  state->coins += 2;
        -: 1375:	}
      543: 1376:      else if (state->hand[player][i] == gold)
        -: 1377:	{
    #####: 1378:	  state->coins += 3;
        -: 1379:	}	
        -: 1380:    }	
        -: 1381:
        -: 1382:  //add bonus
      504: 1383:  state->coins += bonus;
        -: 1384:
      504: 1385:  return 0;
        -: 1386:}
        -: 1387:
        -: 1388:
        -: 1389://end of dominion.c
        -: 1390:
